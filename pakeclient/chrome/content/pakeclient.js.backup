	//prototypeから抜き出し
	//試験実装はPAKEClient.js.back
	//簡易動作用に動作部抜き出し
	//LDAPサーバに記録されているパスワードの暗号化方式それぞれに対応するようにせんとあかんね


	//標準の方で定義されているthis._data
	//this._data = JSON.stringify(obj);
	//の方で定義されているobjは
	//syncAddDevice.jsの方で定義されている．
	//let credentials = {account: Weave.Service.account,
	//password: Weave.Service.password,
	//synckey: Weave.Service.passphrase,
	//serverURL: Weave.Service.serverURL};
	//this._jpakeclient.sendWithPIN(pin, credentials);
	//
	//と定義されている．
	//
	//これをstringify(obj)としているという事は，ユーザの入力情報をJSON文字列へ変換しているという事かな？
	//
	//hmac_inputの定義
Components.utils.import("resource://services-sync/constants.js");
Components.utils.import("resource://services-sync/rest.js");
Components.utils.import("resource://services-sync/util.js");


const JPAKE_SIGNERID_SENDER   = "sender";//送信
const JPAKE_SIGNERID_RECEIVER = "receiver";//受信
const JPAKE_LENGTH_SECRET     = 8;//passの長さ？
const JPAKE_VERIFY_VALUE      = "0123456789ABCDEF";


function pakeClient(){
	
	this._my_signerid = JPAKE_SIGNERID_SENDER;
	this._their_signerid = JPAKE_SIGNERID_RECEIVER;
	var _username;
	var _userpath;
	var _servletUrl;
	var _channel;
		//netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
	
		//JPAKEのインスタンス生成
	this._jpake = Components.classes["@mozilla.org/services-crypto/sync-jpake;1"].createInstance(Components.interfaces.nsISyncJPAKE);
	
}	
		//prototype
pakeClient.prototype = {
	
			//文字のバイト数を取得
	getByte: function getByte(text){
		count = 0;
		for (i=0; i<text.length; i++){
			n = escape(text.charAt(i));
			if (n.length < 4) count++; else count+=2;
		}
		return count;
	},
		//逐次実行
asyncChain: function asyncChain() {
	let argument = arguments.length;
    let funcs = Array.slice(arguments);
	let thisObj = this;
    return function callback() {
		if (funcs.length) {
				//alert("thisObj = " + thisObj);
			let args = Array.slice(arguments).concat(callback);
			let f = funcs.shift();
			f.apply(thisObj, args);
		}
    };
},
	
		//ユーザ情報取得
wizard: function(){
		//window.openDialog("chrome://test/content/testconfig.xul","wizard","chrome,centerscreen,modal,resizable,alwaysRaised,close=no");
	window.openDialog("chrome://pakeClient/content/config.xul","wizard","chrome,centerscreen,modal,resizable,alwaysRaised");
		//ID指定して入力された文字列を取得
		//入力無しならエラー処理(予定)
},
	
authentication: function(){
	
		//逐次実行
	this.asyncChain(this.stepOne,
					this.postStepOne,
					this.stepTwo,
					this.postStepTwo,
					this.stepFinal,
					this.computeKeyVerification,
					this.postStepFinal,
					this.testPost)();
	
},

	
		//stepOne
stepOne: function(callback){
	
	let gx1 = {};
    let gv1 = {};
    let r1 = {};
    let gx2 = {};
    let gv2 = {};
    let r2 = {};	
		//alert("gx1 = " +  typeof gx1);
	
		//C++
		//nsSyncJPAKE::Round1
	try{
	this._jpake.round1(this._my_signerid, gx1, gv1, r1, gx2, gv2, r2);
	}catch(ex){
			//eventの終了？
		/*
		Event.preventDefault();
		Event.stopPropagation();
		 */
		return false;
		
	}
	/*
	 送信用データ生成
	 type: sender
	 payload: one: gx1,gx2,gv1,gv2,r1,r2,id
	 */	
	let one = {gx1: gx1.value,
	gx2:gx2.value,
	zkp_x1: {gr: gv1.value, b: r1.value, id: this._my_signerid},
	zkp_x2: {gr: gv2.value, b: r2.value, id: this._my_signerid},
	user:this._username
	};
		//alert("stepone");
	this._outgoing = {type: this._my_signerid + "1", payload: one};
	callback();
},

		//stepTwo
stepTwo: function(callback){
	//受信データ取得
	let step1 = this._incoming.payload;
	
	if (!step1 || !step1.zkp_x1 || step1.zkp_x1.id != this._their_signerid
        || !step1.zkp_x2 || step1.zkp_x2.id != this._their_signerid) {
			//処理の停止
		alert("処理中止");
		return;
    }
	
	
	let A = {};
	let gvA = {};
	let rA = {};
	
		//確認用出力
		//this._pakeSecret = this._createSecret();
	this._pakeSecret = this._userpath;
		//this.printProperties(this._pakeSecret);	
	
		//C++ nsSyncJPAKE::Round2
	try{
	this._jpake.round2(this._their_signerid,this._pakeSecret,
					   step1.gx1,step1.zkp_x1.gr,step1.zkp_x1.b,
					   step1.gx2,step1.zkp_x2.gr,step1.zkp_x2.b,
					   A,gvA,rA);
	}catch(ex){
		alert(ex);
		return false;
	}
		//送信データ生成
	let two = {A:A.value,
		zkp_A:{gr:gvA.value,b:rA.value,id:this._my_signerid},
		user:this._username};
	
		//this.printProperties(two);
	
	this._outgoing = null;
		//送信用データ
	this._outgoing = {type: this._my_signerid + "2",payload: two}
	
	callback();
	
},
	
		//stepFinal
stepFinal: function(callback){
		//エラー処理
		//エラーなら処理中止
		//送信されたBとその署名
	let step2 = this._incoming.payload;
		//alert("final");
		//エラー処理
	if (!step2 || !step2.zkp_A || step2.zkp_A.id != this._their_signerid) {
			//alert("!step2 = " + !step2);
			//alert("!step2.zkp_A = " + !step2.zkp_A);
			//alert("!step2.zkp_A.id = " + !step2.zkp_A.id);
		alert("false");
		return false;
    }
	let aes256Key = {};
    let hmac256Key = {};
	
		//
	try{
	this._jpake.final(step2.A, step2.zkp_A.gr, step2.zkp_A.b, HMAC_INPUT,
					  aes256Key, hmac256Key);
	}
	catch(ex){
		alert(ex);
		return false;
	}
	
		//alert("step2.A = " + step2.A);
		//alert("HMAC_INPUT =" + HMAC_INPUT);
	alert("aes256key = " + aes256Key.value); //ySH+HjA88Gts0CYIGGLFMEBluBNMtTdI2h50sh1u4/c=
	alert("hmac256key =" + hmac256Key.value); //=Dzw2qSQnot6Pcmjj5j3VidYSEi/NY6HYHN6x7vBXKT8=
	
		//util.safeAtoB(hmac256key.value)という事は，引数として与えられているhmac256key.valueはaes256key.valueか何かの値をbase64でエンコードした値であるという事かな？
		//util.makeHMACHasher HMACの調理者(生成用のインスタンス)を生成し，与えられたHMACキーをしようして初期化します(hmac256key.valueは初期化用の値か)
		//makeHMACKey util内に記載，与えられたキー文字列からHMAC鍵オブジェクトを生成します．という事は，はじめはhmac256key.valueを生成するための値を最終段階の所で生成して，それを用いてhmac_keyの生成を行っているのか．
		//という事は，hasherは与えられたhmac鍵からの復号ってのを持ってそうだね．
		//でも，hmacによるメッセージ認証って両者が共通鍵を持っている事が前提だったんじゃなかったっけ？
		//あぁ，でも，共通鍵のまま暗号化すると，その前の値達から鍵が推察されてしまう可能性があるのかな？
		//だから，一工程挟むのか．
		//pkcs11c.c:6108
		//hmac = HMAC_Create(rawHash,salt,saltLen,usFIPS)
		//
		//HMAC_Create (hash_obj=0x20d7a570, secret=0xbfff21b8 "", secret_len=32, isFIPS=0) at alghmac.c:130
		//
		//HMAC_Init (cx=0x3f357fb0, hash_obj=0x20d7a570, secret=0xbfff21b8 "", secret_len=32, isFIPS=0) at alghmac.c:75
		//
		//
		//
		//
		//
	this._crypto_key = aes256Key.value;
	let hmac_key = Utils.makeHMACKey(Utils.safeAtoB(hmac256Key.value));
	this._hmac_hasher = Utils.makeHMACHasher(Components.interfaces.nsICryptoHMAC.SHA256, hmac_key);
	
	callback();
},
		//クライアント側での実装(予想)
computeKeyVerification: function computeKeyVerification(callback){
	let iv, ciphertext;
	
	try{
		iv = Svc.Crypto.generateRandomIV();
		ciphertext = Svc.Crypto.encrypt(JPAKE_VERIFY_VALUE,this._crypto_key,iv);
	}catch(ex){
		alert(ex);
	}
	
	this._outgoing = {type:this._my_signerid + "3",payload:{cip:ciphertext,IV:iv}};
	
	callback();
},
		//サーバ側に必要な実装
	/*
encryptoData: function encryptData(callback){
	if(this._incoming.type != this._their_signerid + "3"){
		
	}
	
	let step3 = this._incoming.payload;
	
	try{
		cipgertext = Svc.Crypto.encrypt(JPAKE_VERIFY_VALUE,this._crypto_key,step3.IV);
		if(ciphertext != step3.cipgertext){
			alert("Key Mismatch");
		}else{
			alert("match");
		}
	}catch(ex){
		alert(ex);
	}
	
	iv = Svc.Crypto.generateRandomIV();
	 */
		//this._data
	/*
	 *let credentials = {account: Weave.Service.account,
	 *password: Weave.Service.password,
	 *synckey: Weave.Service.passphrase,
	 *serverURL: Weave.Service.serverURL};
	 */
	/*
	try{
	ciphertext = Svc.Crypto.encrypt(this._data);
	hmac = Utils.bytesAsHex(Utils.digestUTF8(cipgertext,this._hmac_hasher));
	}catch(ex){
		
	}
	this._outgoing = {type:this._my_signerid + "3",
		payload:{cipgertext:cipgertext,IV:iv,hmac:hmac}};
	
	callback();
},*/

		//クライアント側に必要な実装
		/*hmac256key.valueで初期化されたhmac生産者を用いて，util.byteAsHexに対して，サーバ側から返された暗号化テキストと，先の初期化したhmac_hasherを引数として渡す．(この感じからすると，hmac_hasherは復号化用のヤツなのかな？)
		 */
decryptData: function decryptData(callback){
	let stap3 = this._incoming.payload;
	
	try{
		let hmac = Utils.bytesAsHex(Utils.digestUTF8(step3.ciphertext,this._hmac_hasher));
		if(hmac != step3.hmac)throw "HMAC validation failed";
	}catch(ex){
	}
	let cleartext;
	try{
		cleartext = Svc.Crypto.decrypt(step3.ciphertext,this._crypto_key,step3.IV);
	}catch(ex){
		alert(ex);
	}
	try{
			//this._newData = JSON.parse(cleartext);
		this._newData = cleartext;
	}catch(ex){
		alert(ex);
	}
	callback();
		//これから
		//postデータ無しでpost
		//確認出来たということを表示？
},
	
		//post(1回目)
postStepOne: function(callback){
	
		//JSONObject
	data = JSON.stringify(this._outgoing);
	var request = new XMLHttpRequest();
		//非同期通信
		//同期通信に変えた方がよい？
		//同期通信なら返信を待つ処理付け加えんと
		//falseが同期通信か
		//URLを用いたセッション管理
		//基本的にshibbolethはセッションの受け入れをしているけども，してない場合にはURLを用いたセッション管理も可能
	request.open("POST","https://idp.example.com/idp/Authn/PAKE",false);
	
		//JPAKEの処理用の特別なHeader追加(予定)
	request.setRequestHeader("Content-type","application/json;text/utf-8");
	request.setRequestHeader("Round","Round1");
	request.setRequestHeader("Auth-PAKELogin","PAKEAuth");
	
	request.send(data)

		//response
	this._servletUrl = request.getResponseHeader("Location");
	alert("step1 = " + this._servletUrl);
	this._incoming = JSON.parse(request.responseText);
	
	callback();

},
		//post(2回目)
postStepTwo: function(callback){
	var request = new XMLHttpRequest();
	
	data = JSON.stringify(this._outgoing);
		//sender1or2.htmlにpost
		//if(request.readyState == 4){
	if(this._servletUrl != null){
		request.open("POST",this._servletUrl,false);
	}else{
		request.open("POST","https://idp.example.com/idp/Authn/UsernamePassword" + this._their_signerid + "2",false);
	}
		//}
	
		//alert(location);
	request.setRequestHeader("Content-type","application/json;text/utf-8");
	request.setRequestHeader("Round","Round2");
	request.setRequestHeader("Auth-PAKELogin","PAKEAuth");
	
	request.send(data);
	
	this._incoming = null;
		//レスポンス取得
	this._incoming = JSON.parse(request.responseText);
	
	callback();
	
},
	
		//3回目
postStepFinal: function(callback){

	var request = new XMLHttpRequest();
	data = JSON.stringify(this._outgoing);
	
	request.open("POST",this._servletUrl,false);
	request.setRequestHeader("Content-type","application/json;text/utf-8");
	request.setRequestHeader("Round","Final");
	request.setRequestHeader("Auth-PAKELogin","PAKEAuth");
	
	request.send(data);
	
	
	this._servletUrl = request.getResponseHeader("Location");
	
	this._incoming = null;
	
	this._incoming = JSON.parse(request.responseText);
	
	var result = this._incoming.payload;
	
		//alert("cip = " + result.cip);
		//alert("IV = " + result.IV);
	
	callback();
},
testPost: function(callback){
	var request = new XMLHttpRequest();
	data = "test";
		//元の所への遷移
	request.open("POST",this._servletUrl,false);
	request.setRequestHeader("Content-type","text/utf-8");
	
	request.send(data);
	
		//alert(request.responseXML);
	//popupclose用のメソッド
	//リダイレクト後のURIを取得
	//bodyに表示
	//ユーザの環境に合わせた表示を行うためにjavascript側でpakeに対応したのもを表示させるために
	//対応した認証サーバでは認証画面を表示出来ない様にすることが出来ればいい感じになるのでは？
	//
	//リダイレクト
	//Loation https://idp.example.com:443/idp/profile/SAML2/Redirect/SSO
	//がレスポンスとして返却されてきているので，この部分を用いてリダイレクト処理を行う様にする
	//また，その結果がbody部になるようにね．
	//そういえば302のコードはリダイレクトのためのコードだったねぇ．
	//ならやることは？
	//リダイレクトのリクエストの監視？
	//それともlocationを用いてlocation.hrefってやる感じかな？
	//
	//エラー文を確認した所，
	//asyncOnChannlRedirectResult
	//onRedirectResult
	//
	//この2つのメソッドが持っていないというエラーが出ているため
	//その2つのメソッドを搭載する方向で進めるかな？
	//
	
	/*
	
			//var uri = request.getResponseHeader("Location");
	
		//alert(this.mainWindow.location);
		//location.href = uri;
		//alert(request.responseXML);
	//popupclose用のメソッド
	//リダイレクト後のURIを取得
	//bodyに表示
	//ユーザの環境に合わせた表示を行うためにjavascript側でpakeに対応したのもを表示させるために
	//対応した認証サーバでは認証画面を表示出来ない様にすることが出来ればいい感じになるのでは？
	//
	//リダイレクト
	//Loation https://idp.example.com:443/idp/profile/SAML2/Redirect/SSO
	//がレスポンスとして返却されてきているので，この部分を用いてリダイレクト処理を行う様にする
	//また，その結果がbody部になるようにね．
	//そういえば302のコードはリダイレクトのためのコードだったねぇ．
	//ならやることは？
	//リダイレクトのリクエストの監視？
	//それともlocationを用いてlocation.hrefってやる感じかな？
	//
	//エラー文を確認した所，
	//asyncOnChannlRedirectResult
	//onRedirectResult
	//
	//この2つのメソッドが持っていないというエラーが出ているため
	//その2つのメソッドを搭載する方向で進めるかな？
	//
	//上のは今後で実装方向で．
	//
	//locationからURLを取得し
	//
	//location.hrefで取得したurlに遷移
	//
	//var uri = request.getResponseHeader("Location");
	
		//this.window.location.href = uri;
			//レスポンスの読み込み/〆
		//リダイレクト先のURL内に埋め込まれたjspのコードを実行する様にしなければならない
		//その為には，取得したレスポンスをって感じなんだけど
		//アレ，実行の場合 body loadってなっているから，bodyの読み込みを行った場合に実行される系のヤツよな．
		//という事はhrefを使って遷移させた先で，こちらに渡されるレスポンスを読み込み，window上にdumpする様にしなければならないと思う．
		//その出力するWindowも，ポップアップではなく元Windowである必要があるため，windowオブジェクトに関して見る
		//それが出来ない場合は，windowのリロードを行い，同じページに対して再度アクセスする様にすれば・・・不格好だが
		//this._input.init(request);
		//読み込みが出来ない
		//inputStreamに関してもう少し確認をしなければならない
		//var response = this._input.read(request.responseXML);
		//this._input.close();

		//window.dump(response);
	/*
		//window.location = 拡張機能側の呼び出し先(config.xul)
	var locationObj = window.location;
	
		//alert("test = " + window.forward().location);
		//uriで指定された先に遷移
	request.setRequestHeader("Referer",uri);
	locationObj.href = uri;
	
		//inputStream.readを使って読み込みを行う必要がある？
		//現状
		//httpfoxを介すると，読み込まれた数値が出力されてくる．
	this._input.init(request);
	var response = this._input.read(request.responseText);
		//this._input.close();
	
	
	var baseWindow = window.location;
	
	baseWindow.postMessage(response.body,"*");
	 this.abort();
	*/
	/*
	 *リダイレクト用のリスナーを作成しなければならない可能性が高い
	 */	
	*/
	var uri = request.getResponseHeader("Location");
	location.href = uri;
	
		//alert(request.responseXML);
	
	this.abort();
	
	//認証成功したという表示
},
	
		//リダイレクトのための関数
		//nsIChannelEventSink
onChannelRedirect: function(aOldChannel, aNewChannel, aFlags){
	alert("test alert");
	this._channel = aNewChannel;
},
	
onRedirect: function(aChannel, aNewChannel){alert("test alert redirect")},
	
asyncOnChannlRedirectResult: function(aOldChannel, aNewChannel, aFlags){
	alert("test alert async");
	this._channel = aNewChannel;
},
onRedirectResult: function(aChannel,aNewChannel){
	alert("test alert result redirect");
},
		//XPCOMインターフェースに見せかけるためにQIを実装する必要があるということ
QueryInterface : function(aIID){
	if(aIID.equals(Components.interfaces.nsIChannelEventSink)){
		return this;
	}throw Components.results.NS_NOINTERFACE;
},
		//ユーザ入力データ取得
start: function(){
	//wizardで入力された数値を取得する.
	this._username = document.getElementById("userID").value;
	this._userpath = document.getElementById("password").value;
		//pakeによる認証処理を実行
	this.authentication();
},
	
		//終了
abort: function(){
	
	//セッションに記録された情報を失敗した場合消去するためのメソッドが必要である
	//でないと，また次いで認証を行うことが出来ない可能性がある．
	
	this._finished = true;
    let self = this;
	return false;
},
};
var Client = new pakeClient;

	//headerlistener

window.addEventListener("load",function(e){getMessageHeader(e);},false);

function getMessageHeader(aEvent){
	/*let messenger = Components.class["@mozilla.org/messenger;1"].createInstance(Components.interfaces.nsIMessenger);
	
	msgHdr = messenger.messageServiceFromURI(messageURI);
	
	alert(msgHdr);*/
};
